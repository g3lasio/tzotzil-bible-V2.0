// nevin.js - Sistema de chat teolÃ³gico con estilo Transformers
class NevinChat {
    constructor() {
        this.state = {
            currentEmotion: "neutral",
            chatHistory: [],
            userContext: {},
            isProcessing: false,
            userId:
                document.querySelector('meta[name="user-id"]')?.content || null,
            transformationActive: false,
        };

        // Inicializar cuando el DOM estÃ© listo
        document.addEventListener("DOMContentLoaded", () => this.init());
    }

    init() {
        this.setupEventListeners();
        this.showWelcomeMessage();
        this.displayRandomSuggestions();
        this.initTransformationEffects();
    }

    initTransformationEffects() {
        const chatContainer = document.getElementById("chat-container");
        if (chatContainer) {
            chatContainer.classList.add("transform-effect");
            this.addTransformObserver();
        }
    }

    addTransformObserver() {
        const observer = new MutationObserver((mutations) => {
            mutations.forEach((mutation) => {
                if (mutation.addedNodes.length) {
                    mutation.addedNodes.forEach((node) => {
                        if (node.nodeType === 1) {
                            node.classList.add("transform-effect");
                        }
                    });
                }
            });
        });

        const config = { childList: true, subtree: true };
        observer.observe(document.getElementById("chat-container"), config);
    }

    setupEventListeners() {
        const userInput = document.getElementById("user-input");
        const sendButton = document.getElementById("send-button");

        if (userInput) {
            userInput.addEventListener("keypress", (e) => {
                if (e.key === "Enter" && !e.shiftKey) {
                    e.preventDefault();
                    this.sendMessage();
                }
            });
        }

        if (sendButton) {
            sendButton.addEventListener("click", () => this.sendMessage());
        }

        // Otros botones
        document
            .getElementById("new-chat-button")
            ?.addEventListener("click", () => this.startNewChat());
        document
            .getElementById("home-button")
            ?.addEventListener("click", () => this.goHome());
        document
            .getElementById("chat-history-icon")
            ?.addEventListener("click", () => this.showChatHistory());
    }

    async showWelcomeMessage() {
        const username = localStorage.getItem("username");
        let welcomeText = "";

        if (username && username !== "null") {
            const greetings = [
                "Â¡Me alegra verte de nuevo",
                "Â¡QuÃ© gusto tenerte de vuelta",
                "Â¡Bienvenido nuevamente",
                "Â¡Es un placer verte otra vez",
            ];
            const randomGreeting =
                greetings[Math.floor(Math.random() * greetings.length)];
            welcomeText = `${randomGreeting}, ${username}! Soy Nevin, tu asistente bÃ­blico. Â¿En quÃ© puedo ayudarte hoy?`;
        } else {
            welcomeText = `Â¡Hola! Soy Nevin, tu asistente bÃ­blico. Â¿En quÃ© puedo ayudarte hoy?`;
        }

        await this.showTransformationMessage(welcomeText);
    }

    showNameInput() {
        const chatHistory = document.getElementById("chat-history");
        if (!chatHistory) return;

        const inputContainer = document.createElement("div");
        inputContainer.classList.add(
            "name-input-container",
            "transform-effect",
        );

        const nameInput = document.createElement("input");
        nameInput.type = "text";
        nameInput.placeholder = "Escribe tu nombre aquÃ­...";
        nameInput.classList.add("name-input");

        const submitButton = document.createElement("button");
        submitButton.textContent = "Continuar";
        submitButton.classList.add("name-submit", "transform-button");

        const handleNameSubmit = async () => {
            const name = nameInput.value.trim();
            if (name) {
                localStorage.setItem("username", name);
                inputContainer.remove();
                await this.showTransformationMessage(
                    `Â¡Gracias, ${name}! Es un placer conocerte. Estoy aquÃ­ para ayudarte a explorar y comprender mejor las verdades bÃ­blicas. Â¿QuÃ© te gustarÃ­a aprender hoy?`,
                );
                this.displayRandomSuggestions();
            }
        };

        submitButton.onclick = handleNameSubmit;
        nameInput.onkeypress = (e) => {
            if (e.key === "Enter") handleNameSubmit();
        };

        inputContainer.appendChild(nameInput);
        inputContainer.appendChild(submitButton);
        chatHistory.appendChild(inputContainer);

        inputContainer.scrollIntoView({ behavior: "smooth" });
    }

    formatReferences(text) {
        // El texto ya viene formateado desde el backend
        return text || "";
    }

    async showTransformationMessage(text, isUser = false) {
        const chatHistory = document.getElementById("chat-history");
        if (!chatHistory) return;

        // Ocultar sugerencias cuando comienza la interacciÃ³n
        if (!isUser) {
            const suggestionsContainer = document.getElementById(
                "suggestions-container",
            );
            if (suggestionsContainer) {
                suggestionsContainer.style.display = "none";
            }
        }

        const container = document.createElement("div");
        container.classList.add("transform-effect");

        if (isUser) {
            container.classList.add("user-message");
            container.textContent = text;
            chatHistory.appendChild(container);
            container.scrollIntoView({ behavior: "smooth" });
        } else {
            container.classList.add("nevin-response-container");

            const icon = document.createElement("img");
            icon.src = "/static/images/nevin-icon.svg";
            icon.alt = "Icono de Nevin";
            icon.classList.add("nevin-icon-response");
            container.appendChild(icon);

            const messageElement = document.createElement("div");
            messageElement.classList.add("nevin-message");
            container.appendChild(messageElement);
            chatHistory.appendChild(container);

            // Efecto de escritura progresiva
            const formattedText = this.formatReferences(text);
            const tempDiv = document.createElement("div");
            tempDiv.innerHTML = formattedText;
            const textContent = tempDiv.textContent;

            let buffer = "";
            const words = textContent.split(" ");
            let lastScroll = chatHistory.scrollTop;
            let userScrolled = false;

            // Detectar si el usuario hace scroll
            const scrollHandler = () => {
                if (chatHistory.scrollTop !== lastScroll) {
                    userScrolled = true;
                }
            };

            chatHistory.addEventListener("scroll", scrollHandler, {
                passive: true,
            });

            const writeSpeed = Math.max(10, Math.min(30, 30 - Math.floor(textContent.length / 100)));
            for (const word of words) {
                buffer += word + " ";
                await new Promise((resolve) => setTimeout(resolve, writeSpeed));
                const partialFormatted = this.formatReferences(buffer);
                messageElement.innerHTML = partialFormatted;

                if (!userScrolled) {
                    const isNearBottom =
                        chatHistory.scrollHeight -
                            chatHistory.scrollTop -
                            chatHistory.clientHeight <
                        100;
                    if (isNearBottom) {
                        container.scrollIntoView({
                            block: "end",
                            behavior: "smooth",
                        });
                    }
                }
                lastScroll = chatHistory.scrollTop;
            }

            // Limpiar el event listener
            chatHistory.removeEventListener("scroll", scrollHandler);

            // Asegurar que el formato final sea correcto
            messageElement.innerHTML = formattedText;
            
            try {
                // Agregar enlace de descarga si el mensaje contiene un pdf_url
                if (!isUser && this.currentResponse?.pdf_url && formattedText.includes('[PDF_LINK]')) {
                    formattedText = formattedText.replace('[PDF_LINK]', '');
                    const downloadLink = document.createElement('a');
                    downloadLink.href = this.currentResponse.pdf_url;
                    downloadLink.className = 'seminar-download-link';
                    downloadLink.innerHTML = 'ðŸ“„ Descargar Seminario PDF';
                    downloadLink.target = '_blank';
                    
                    // Asegurar que el enlace sea visible y tenga estilo
                    downloadLink.style.display = 'block';
                    downloadLink.style.marginTop = '15px';
                    messageElement.appendChild(document.createElement('br'));
                    messageElement.appendChild(document.createElement('br'));
                    messageElement.appendChild(downloadLink);
                }
            } catch (error) {
                console.error('Error al procesar PDF:', error);
            }
        }
    }

    displayRandomSuggestions(clearPrevious = false) {
        if (clearPrevious) {
            const chatHistory = document.getElementById("chat-history");
            if (chatHistory) {
                chatHistory.innerHTML = "";
            }
        }
        
        // Ajustar nÃºmero de sugerencias segÃºn el tamaÃ±o de pantalla
        const isMobile = window.innerWidth <= 768;
        const numSuggestions = isMobile ? 2 : 3;
        const suggestions = [
            "Â¿QuÃ© relaciÃ³n tiene el Arca de NoÃ© con el santuario celestial?",
            "Â¿Por quÃ© el nÃºmero siete tiene tanta relevancia en la Biblia?",
            "Â¿CÃ³mo se explica la Trinidad a travÃ©s del bautismo de JesÃºs?",
            "Â¿Por quÃ© se considera el sÃ¡bado como el sello de Dios en el tiempo del fin?",
            'Â¿QuÃ© significa realmente "el juicio investigador" en el contexto celestial?',
            "Â¿CÃ³mo conecta el libro de Daniel con las profecÃ­as del Apocalipsis?",
            'Â¿Por quÃ© los Ã¡ngeles son descritos como "seres ministradores" en Hebreos?',
            "Â¿QuÃ© simboliza el candelabro de siete brazos en el santuario del Antiguo Testamento?",
            "Â¿CÃ³mo los escritos de Elena G. de White complementan las doctrinas adventistas?",
            'Â¿CuÃ¡l es el significado del "libro de la vida" mencionado en Apocalipsis?',
            "Â¿QuÃ© conexiÃ³n existe entre el manÃ¡ en el desierto y la Santa Cena?",
            'Â¿Por quÃ© el sacrificio de Cristo es llamado "una ofrenda perfecta"?',
            "Â¿QuÃ© profecÃ­as se cumplieron con exactitud en la caÃ­da de JerusalÃ©n?",
            "Â¿CÃ³mo influyen las tres etapas del juicio celestial en la salvaciÃ³n?",
            "Â¿QuÃ© rol juega Babilonia simbÃ³lica en el tiempo del fin?",
            "Â¿QuÃ© relaciÃ³n existe entre el diluvio universal y el bautismo cristiano?",
            'Â¿CÃ³mo se define la "luz menor" y la "luz mayor" segÃºn Elena G. de White?',
            "Â¿QuÃ© implicaciones tiene la ley dominical para los creyentes?",
            "Â¿Por quÃ© el dÃ­a de la expiaciÃ³n es tan significativo en las Escrituras?",
            "Â¿CÃ³mo describe la Biblia la condiciÃ³n de los muertos antes de la resurrecciÃ³n?",
            "Â¿QuÃ© nos enseÃ±a el tabernÃ¡culo terrenal sobre la obra de Cristo en el cielo?",
            'Â¿Por quÃ© JesÃºs es llamado "el Cordero de Dios que quita el pecado del mundo"?',
            "Â¿QuÃ© representa el cuarto mandamiento en el contexto de los Ãºltimos dÃ­as?",
            "Â¿CÃ³mo se explica el misterio de la iniquidad segÃºn Pablo?",
            "Â¿QuÃ© relaciÃ³n tiene la visiÃ³n de Ezequiel sobre los huesos secos con la resurrecciÃ³n?",
            "Â¿CÃ³mo encaja la purificaciÃ³n del santuario con la profecÃ­a de las 2300 tardes y maÃ±anas?",
            'Â¿QuÃ© significa que JesÃºs sea nuestro "sumo sacerdote" segÃºn Hebreos?',
            "Â¿Por quÃ© la fe y las obras no pueden separarse en la vida cristiana?",
            "Â¿QuÃ© simboliza el rÃ­o de agua de vida en Apocalipsis?",
            "Â¿CÃ³mo se manifiesta la justicia de Cristo en la vida de los creyentes?",
            "Â¿QuÃ© eventos marcarÃ¡n la segunda venida de JesÃºs segÃºn Mateo 24?",
            "Â¿QuÃ© lecciones espirituales nos enseÃ±a el Ã©xodo de Israel de Egipto?",
            'Â¿Por quÃ© se llama a SatanÃ¡s "el acusador de los hermanos"?',
            'Â¿QuÃ© significa la expresiÃ³n "temed a Dios y dadle gloria" del mensaje de los tres Ã¡ngeles?',
            "Â¿CÃ³mo el santuario celestial aclara la obra mediadora de Cristo?",
            "Â¿QuÃ© rol tienen los 144,000 en el tiempo del fin?",
            "Â¿Por quÃ© es importante el don de profecÃ­a en la iglesia remanente?",
            "Â¿QuÃ© simboliza el sello de Dios y la marca de la bestia?",
            "Â¿QuÃ© conexiÃ³n existe entre las plagas de Egipto y las plagas finales?",
            "Â¿CÃ³mo armonizan la justicia y la misericordia de Dios en el juicio final?",
            "Â¿QuÃ© representa el Ã¡rbol de la vida en GÃ©nesis y Apocalipsis?",
            'Â¿Por quÃ© los diez mandamientos son llamados "eternos"?',
            "Â¿QuÃ© nos enseÃ±a el sacrificio de Isaac sobre la fe y la obediencia?",
            "Â¿CÃ³mo se interpreta el sueÃ±o de Nabucodonosor en Daniel 2?",
            "Â¿QuÃ© papel tiene el EspÃ­ritu Santo en la experiencia del nuevo nacimiento?",
            'Â¿QuÃ© significa vivir "a la luz del regreso de Cristo"?',
            "Â¿CÃ³mo explica la Biblia el origen del mal?",
            "Â¿QuÃ© representa la mujer vestida de sol en Apocalipsis 12?",
            "Â¿CÃ³mo el santuario es una clave para entender el plan de salvaciÃ³n?",
            "Â¿QuÃ© lecciÃ³n espiritual nos enseÃ±a el lavamiento de pies?",
            "Â¿CÃ³mo armoniza la inmortalidad condicional con las enseÃ±anzas bÃ­blicas?",
            "Â¿QuÃ© eventos conectan la cruz con la resurrecciÃ³n de JesÃºs?",
            "Â¿CÃ³mo la parÃ¡bola de las diez vÃ­rgenes aplica al tiempo del fin?",
            "Â¿QuÃ© simbolizan las trompetas en Apocalipsis?",
            "Â¿Por quÃ© la fe de Abraham es llamada justicia?",
            "Â¿QuÃ© mensaje tiene la carta a Laodicea para los cristianos de hoy?",
            "Â¿QuÃ© profecÃ­as aÃºn faltan por cumplirse antes del regreso de Cristo?",
            'Â¿CÃ³mo interpretar el "tiempo del fin" segÃºn las Escrituras?',
            "Â¿QuÃ© lecciones se extraen de las pruebas de Job?",
            "Â¿Por quÃ© se enfatiza tanto el sÃ¡bado en los escritos adventistas?",
            "Â¿QuÃ© conexiÃ³n tiene el pacto eterno con la cruz de Cristo?",
            "Â¿CÃ³mo la Biblia describe la nueva tierra?",
            "Â¿QuÃ© relaciÃ³n tienen los sÃ­mbolos en Daniel y Apocalipsis?",
            'Â¿Por quÃ© se llama a Cristo "el segundo AdÃ¡n"?',
            "Â¿CÃ³mo se interpreta la parÃ¡bola del trigo y la cizaÃ±a?",
            "Â¿QuÃ© representa el dragÃ³n en Apocalipsis?",
            "Â¿CÃ³mo el santuario celestial explica el juicio pre-advenimiento?",
            'Â¿QuÃ© significa ser parte del "remanente fiel"?',
            "Â¿QuÃ© enseÃ±anzas nos deja la cena pascual sobre el sacrificio de JesÃºs?",
            "Â¿CÃ³mo el Apocalipsis revela el carÃ¡cter de Dios?",
            "Â¿QuÃ© simbolizan las siete iglesias de Asia?",
            "Â¿QuÃ© rol tiene la ley moral en el tiempo del fin?",
            "Â¿CÃ³mo los salmos describen el carÃ¡cter de Dios?",
            'Â¿QuÃ© significa "justificaciÃ³n por la fe" segÃºn Pablo?',
            "Â¿CÃ³mo las profecÃ­as mesiÃ¡nicas del Antiguo Testamento se cumplieron en JesÃºs?",
            "Â¿QuÃ© representa el altar del incienso en el santuario?",
            'Â¿Por quÃ© la Biblia llama a JesÃºs "el Alfa y la Omega"?',
            'Â¿QuÃ© significa que "los muertos en Cristo resucitarÃ¡n primero"?',
            "Â¿QuÃ© lecciones podemos aprender de la vida de Daniel en Babilonia?",
            'Â¿Por quÃ© la iglesia es llamada "el cuerpo de Cristo"?',
            "Â¿QuÃ© simbolizan las bestias en las profecÃ­as de Daniel?",
            "Â¿CÃ³mo interpretar los tiempos profÃ©ticos en la Biblia?",
            "Â¿QuÃ© relaciÃ³n tienen las siete trompetas con los eventos finales?",
            'Â¿Por quÃ© JesÃºs dijo "Yo soy la vid verdadera"?',
            "Â¿QuÃ© representa la gran ramera en Apocalipsis?",
            "Â¿CÃ³mo el arca del pacto refleja el carÃ¡cter de Dios?",
            "Â¿QuÃ© lecciones espirituales nos deja la parÃ¡bola del hijo prÃ³digo?",
            'Â¿QuÃ© significa "pecado imperdonable" segÃºn JesÃºs?',
            "Â¿CÃ³mo explica la Biblia la naturaleza de Cristo?",
            "Â¿QuÃ© simbolizan las coronas en el Apocalipsis?",
            "Â¿Por quÃ© es importante el pacto de gracia en la salvaciÃ³n?",
            "Â¿QuÃ© nos enseÃ±a la historia de MoisÃ©s sobre la intercesiÃ³n?",
            "Â¿QuÃ© representa la cena de bodas del Cordero?",
            "Â¿CÃ³mo la justicia de Cristo se manifiesta en el juicio final?",
            "Â¿QuÃ© rol tiene la esperanza en la vida cristiana?",
            "Â¿CÃ³mo el libro de los Salmos describe la relaciÃ³n del creyente con Dios?",
            "Â¿QuÃ© representa la caÃ­da de Babilonia en Apocalipsis?",
            'Â¿Por quÃ© JesÃºs dijo "No he venido a abolir la ley"?',
            "Â¿QuÃ© simboliza el EspÃ­ritu Santo en la forma de una paloma?",
            "Â¿QuÃ© relaciÃ³n tienen las bienaventuranzas con la vida cristiana?",
            "Â¿CÃ³mo la Biblia describe el carÃ¡cter del anticristo?",
            "Â¿QuÃ© lecciones podemos aprender de la vida de JosÃ© en Egipto?",
            'Â¿QuÃ© significa "Dios es amor" segÃºn las Escrituras?',
            "Â¿QuÃ© relaciÃ³n tiene la cruz con la segunda venida?",
            "Â¿Por quÃ© el sÃ¡bado serÃ¡ un tema de conflicto en el tiempo del fin?",
        ];

        const container = document.getElementById("suggestions-container");
        if (!container) return;

        container.innerHTML = "";
        container.style.display = "flex";

        suggestions
            .sort(() => Math.random() - 0.5)
            .slice(0, 3)
            .forEach((suggestion) => {
                const button = document.createElement("button");
                button.classList.add("suggestion-button", "transform-button");
                button.textContent = suggestion;
                button.onclick = () => this.handleSuggestionClick(suggestion);
                container.appendChild(button);
            });
    }

    handleSuggestionClick(suggestion) {
        const inputField = document.getElementById("user-input");
        if (inputField) {
            inputField.value = suggestion;
            this.sendMessage();
        }
    }

    async sendMessage() {
        const inputField = document.getElementById("user-input");
        const sendButton = document.getElementById("send-button");
        const message = inputField?.value.trim();
        const chatHistory = document.getElementById("chat-history");
        const suggestionsContainer = document.getElementById(
            "suggestions-container",
        );

        if (!message || this.state.isProcessing) {
            console.log("Mensaje vacÃ­o o el sistema estÃ¡ ocupado.");
            return;
        }

        // Hide suggestions and clear chat
        if (suggestionsContainer) {
            suggestionsContainer.style.display = "none";
        }
        // No limpiar el historial para mantener la conversaciÃ³n fluida
        if (!chatHistory) {
            console.error("Elemento chat-history no encontrado");
            return;
        }

        // Validar longitud del mensaje
        if (message.length > 500) {
            alert("El mensaje es demasiado largo. Por favor, acÃ³rtalo.");
            return;
        }

        try {
            this.state.isProcessing = true;
            inputField.disabled = true;
            if (sendButton) sendButton.disabled = true;

            // Mostrar mensaje del usuario
            await this.showTransformationMessage(message, true);
            inputField.value = "";

            // Mostrar indicador de "pensando"
            const thinkingContainer = document.createElement("div");
            thinkingContainer.classList.add("nevin-thinking");
            
            const steps = [
                { id: 'thinking', text: 'Procesando consulta', time: 1500 },
                { id: 'doctrinal', text: 'Aplicando validaciÃ³n doctrinal', time: 2000 },
                { id: 'biblical', text: 'Aplicando interpretaciÃ³n bÃ­blica', time: 2000 },
                { id: 'apologetic', text: 'Verificando modo apologÃ©tico', time: 1500 }
            ];

            const randomStep = steps[Math.floor(Math.random() * steps.length)];

            const thinkingHTML = `
                <div class="nevin-response-container">
                    <img src="/static/images/nevin-icon.svg" alt="Icono de Nevin" class="nevin-icon-response">
                    <div class="thinking-steps">
                        <div class="thinking-step active">
                            <span class="step-text">${randomStep.text}</span>
                            <div class="step-dots">
                                <span class="dot">.</span>
                                <span class="dot">.</span>
                                <span class="dot">.</span>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            
            thinkingContainer.innerHTML = thinkingHTML;

            // FunciÃ³n para mostrar cada paso
            const showStep = async (step, index) => {
                const stepElement = document.createElement('div');
                stepElement.className = 'thinking-step';
                stepElement.id = step.id;
                stepElement.innerHTML = `
                    <span class="step-text">${step.text}</span>
                    <span class="step-dots">
                        <span class="dot">.</span>
                        <span class="dot">.</span>
                        <span class="dot">.</span>
                    </span>
                `;
                stepsContainer.appendChild(stepElement);
                await new Promise(resolve => setTimeout(resolve, step.time));
                if (index < steps.length - 1) {
                    stepElement.classList.add('completed');
                }
            };
            document
                .getElementById("chat-history")
                .appendChild(thinkingContainer);
            thinkingContainer.scrollIntoView({ behavior: "smooth" });

            console.log("Enviando datos al backend:");
            console.log({
                question: message,
                user_id: this.state.userId,
            });

            // Llamada al backend
            const response = await fetch("/api/nevin/chat/revolutionary", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({
                    question: message,
                    context: "",
                    language: "Spanish",
                    extended_thinking: true
                }),
            });

            console.log("Respuesta del servidor:", response);

            // Remover indicador de "pensando"
            thinkingContainer.remove();

            if (!response.ok) {
                throw new Error("Error en la respuesta del servidor");
            }

            const data = await response.json();
            console.log("Datos recibidos del servidor:", data);
            await this.showTransformationMessage(data.response);
        } catch (error) {
            console.error("Error enviando mensaje:", error);
            await this.showTransformationMessage(
                "Lo siento, hubo un error al procesar tu mensaje. Por favor, intenta de nuevo.",
            );
        } finally {
            this.state.isProcessing = false;
            if (inputField) {
                inputField.disabled = false;
                inputField.focus();
            }
            if (sendButton) sendButton.disabled = false;
        }
    }

    startNewChat() {
        const chatHistory = document.getElementById("chat-history");
        if (chatHistory) {
            chatHistory.innerHTML = "";
            this.showWelcomeMessage();
            this.displayRandomSuggestions(true);
        }
    }

    goHome() {
        window.location.href = "/home";
    }

    showChatHistory() {
        console.log("Mostrar historial de chat");
    }
}

// Inicializar Nevin y exportar funciones globales
const nevinChat = new NevinChat();

// Exponer funciones globalmente
window.sendMessage = () => nevinChat.sendMessage();
window.startNewChat = () => nevinChat.startNewChat();
window.goHome = () => nevinChat.goHome();
window.showChatHistory = () => nevinChat.showChatHistory();

window.handleVerseClick = (reference) => {
    // Extrae el libro y versÃ­culo
    const parts = reference.split(" ");
    const chapter = parts[parts.length - 1].split(":")[0];
    const verse = parts[parts.length - 1].split(":")[1];
    let book = parts.slice(0, -1).join(" ");

    // Construye la URL
    const url = `/chapter/${encodeURIComponent(book)}/${chapter}#verse-${verse}`;

    // Abre en una nueva pestaÃ±a
    window.open(url, "_blank");
};
document.addEventListener('DOMContentLoaded', function() {
    const chatForm = document.getElementById('chat-form');
    if (chatForm) {
        chatForm.addEventListener('submit', handleChatSubmit);
    }
});

async function handleChatSubmit(e) {
    e.preventDefault();
    // Chat submission logic here
}
